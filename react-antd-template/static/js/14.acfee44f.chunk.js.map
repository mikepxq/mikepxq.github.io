{"version":3,"sources":["views/demo/vs-version/index.tsx"],"names":["getVersionSplit","version","split","map","v","String","getIsLargeWithStart","start","end","startList","endList","len","length","isLargeWithStart","undefined","i","Number","demoList","StartVsResultElementMap","greater","style","color","less","equal","VsVersion","props","className","useState","startVsResult","setStartVsResult","Form","useForm","form","useEffect","setFieldsValue","startVersion","endVersion","validator","a","validateFields","catch","_form","width","onValuesChange","span","Item","name","rules","pattern","patternMap","appVersion","message","placeholder","textAlign","type","onClick","item","index"],"mappings":"0RAUMA,EAAkB,SAACC,GACvB,OAAOA,EAAQC,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAOC,OAAOD,OAOxCE,EAAsB,SAACC,EAAeC,GAM1C,IALA,IAAMC,EAAYT,EAAgBO,GAChCG,EAAUV,EAAgBQ,GAC1BG,EAAMF,EAAUG,OAASF,EAAQE,OAASH,EAAUG,OAASF,EAAQE,OACnEC,OAAmBC,EAEdC,EAAI,EAAGA,EAAIJ,EAAKI,IACvB,GAAIC,OAAOP,EAAUM,IAAM,IAAMC,OAAON,EAAQK,IAAM,GAAtD,CACA,QAAyBD,IAArBD,EAAgC,MACpCA,EAAmBG,OAAOP,EAAUM,IAAM,GAAKC,OAAON,EAAQK,IAAM,GAEtE,OAAOF,GASHI,EAAW,CACf,CAAEV,MAAO,UAAWC,IAAK,SACzB,CAAED,MAAO,UAAWC,IAAK,SACzB,CAAED,MAAO,aAAcC,IAAK,UAExBU,EAA0B,CAC9BC,QAAS,sBAAMC,MAAO,CAAEC,MAAO,SAAtB,0BACTC,KAAM,sBAAMF,MAAO,CAAEC,MAAO,OAAtB,0BACNE,MAAO,iDAuFMC,UArF+B,SAACC,GAC7C,MAA2BA,EAAnBC,iBAAR,MAAoB,GAApB,EAEA,EAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,EAAeC,IAAKC,UAAbC,EAAP,oBACAC,qBAAU,WACRD,EAAKE,eAAe,CAClBC,aAAc,MACdC,WAAY,UAEdC,MACC,IACH,IAAMA,EAAS,uCAAG,8BAAAC,EAAA,sEAEIN,EAAKO,iBAAiBC,OAAM,eAFhC,UAEVC,EAFU,6DAIV5B,EAAmBP,EAAoBmC,EAAMN,aAAcM,EAAML,aAJvD,yCAKaP,EAAiB,YAL9B,eAMSf,IAArBD,EANY,0CAM2BgB,EAAiB,UAN5C,QAOhBA,EAAiB,QAPD,4CAAH,qDASf,OACE,sBAAKH,UAAS,UAAKA,EAAL,cAAd,UACE,gQACA,eAAC,IAAD,CAAMN,MAAO,CAAEsB,MAAO,KAAtB,UACE,eAAC,IAAD,CACEV,KAAMA,EACNW,eAAgB,WACdN,KAHJ,UAKE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKO,KAAM,GAAX,SACE,cAAC,IAAKC,KAAN,CACEC,KAAK,eACLC,MAAO,CAAC,CAAEC,QAASC,IAAWC,WAAYC,QAAS,wFAFrD,SAGE,cAAC,IAAD,CAAUC,YAAY,mDAG1B,cAAC,IAAD,CAAKR,KAAM,EAAGxB,MAAO,CAAEiC,UAAW,UAAlC,iBAGA,cAAC,IAAD,CAAKT,KAAM,GAAX,SACE,cAAC,IAAKC,KAAN,CACEC,KAAK,aACLC,MAAO,CAAC,CAAEC,QAASC,IAAWC,WAAYC,QAAS,wFAFrD,SAGE,cAAC,IAAD,CAAUC,YAAY,sDAK5B,cAAC,IAAKP,KAAN,CAAWnB,UAAU,QAArB,SACE,cAAC,IAAD,CAAQA,UAAU,KAAK4B,KAAK,UAAUC,QAASlB,EAA/C,+BAKHT,GAAiB,uFAAaV,EAAwBU,MAEvD,qBAAIF,UAAU,YAAd,UACE,qBAAIA,UAAU,aAAd,UACE,4DACA,4DAFF,IAEoB,cAAC,IAAD,OAEnBT,EAASd,KAAI,SAACqD,EAAMC,GACnB,OACE,qBAAmC/B,UAAU,QAA7C,UACE,+BAAO8B,EAAKjD,QACZ,+BAAOiD,EAAKhD,MACZ,cAAC,IAAD,CACEkB,UAAU,KACV6B,QAAS,WACPvB,EAAKE,eAAe,CAAEC,aAAcqB,EAAKjD,MAAO6B,WAAYoB,EAAKhD,MACjE6B,KAJJ,4BAHF,UAAYmB,EAAKjD,MAAjB,YAA0BkD","file":"static/js/14.acfee44f.chunk.js","sourcesContent":["import AppInput from \"@/components/app-input\";\r\nimport { patternMap } from \"@/model\";\r\nimport { Button, Card, Col, Form, Row } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./index.less\";\r\n/**\r\n *\r\n * @param version\r\n * @returns 返回字符数组\r\n */\r\nconst getVersionSplit = (version: string) => {\r\n  return version.split(\".\").map((v) => String(v)); //Number(0010)-->8\r\n};\r\n/**\r\n * 前提条件 版本字符是正确的\r\n * @param start\r\n * @param end\r\n */\r\nconst getIsLargeWithStart = (start: string, end: string) => {\r\n  const startList = getVersionSplit(start),\r\n    endList = getVersionSplit(end),\r\n    len = startList.length > endList.length ? startList.length : endList.length;\r\n  let isLargeWithStart = undefined; //默认相等\r\n  // console.log(\"[]\", startList, endList);\r\n  for (let i = 0; i < len; i++) {\r\n    if (Number(startList[i] || 0) == Number(endList[i] || 0)) continue; //一样大的就比较下一个\r\n    if (isLargeWithStart !== undefined) break; //已经有结果，不用再比较\r\n    isLargeWithStart = Number(startList[i] || 0) > Number(endList[i] || 0);\r\n  }\r\n  return isLargeWithStart;\r\n};\r\ninterface Props {\r\n  [key: string]: any;\r\n}\r\ninterface FormProps {\r\n  startVersion: string;\r\n  endVersion: string;\r\n}\r\nconst demoList = [\r\n  { start: \"0.0.1.0\", end: \"0.0.1\" },\r\n  { start: \"0.0.0.1\", end: \"0.0.1\" },\r\n  { start: \"0.0.0001.1\", end: \"0.0.1\" },\r\n];\r\nconst StartVsResultElementMap = {\r\n  greater: <span style={{ color: \"green\" }}>大于</span>,\r\n  less: <span style={{ color: \"red\" }}>小于</span>,\r\n  equal: <span>等于</span>,\r\n};\r\nconst VsVersion: React.FC<ViewProps<Props>> = (props) => {\r\n  const { className = \"\" } = props;\r\n\r\n  const [startVsResult, setStartVsResult] = useState<\"greater\" | \"less\" | \"equal\">();\r\n  //render\r\n  const [form] = Form.useForm<FormProps>();\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      startVersion: \"0.1\",\r\n      endVersion: \"0.0.1\",\r\n    });\r\n    validator();\r\n  }, []);\r\n  const validator = async () => {\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const _form = await form.validateFields().catch(() => {});\r\n    if (!_form) return;\r\n    const isLargeWithStart = getIsLargeWithStart(_form.startVersion, _form.endVersion);\r\n    if (isLargeWithStart) return setStartVsResult(\"greater\");\r\n    if (isLargeWithStart === undefined) return setStartVsResult(\"equal\");\r\n    setStartVsResult(\"less\");\r\n  };\r\n  return (\r\n    <div className={`${className} demo-page`}>\r\n      <h3>有些时候，我们需要判断开始和结束版本的大小，这里是实现了一个算法来完成比较</h3>\r\n      <Card style={{ width: 500 }}>\r\n        <Form\r\n          form={form}\r\n          onValuesChange={() => {\r\n            validator();\r\n          }}>\r\n          <Row>\r\n            <Col span={11}>\r\n              <Form.Item\r\n                name=\"startVersion\"\r\n                rules={[{ pattern: patternMap.appVersion, message: \"请输入正确的版本格式，如：0.0.1\" }]}>\r\n                <AppInput placeholder=\"请输入开始版本\"></AppInput>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={2} style={{ textAlign: \"center\" }}>\r\n              ---\r\n            </Col>\r\n            <Col span={11}>\r\n              <Form.Item\r\n                name=\"endVersion\"\r\n                rules={[{ pattern: patternMap.appVersion, message: \"请输入正确的版本格式，如：0.0.1\" }]}>\r\n                <AppInput placeholder=\"请输入结束版本\"></AppInput>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Form.Item className=\"clear\">\r\n            <Button className=\"fr\" type=\"primary\" onClick={validator}>\r\n              验证\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n        {startVsResult && <p>开始是大的版本号：{StartVsResultElementMap[startVsResult]}</p>}\r\n\r\n        <ul className=\"demo-list\">\r\n          <li className=\"title-item\">\r\n            <span>开始版本</span>\r\n            <span>结束版本</span> <Button></Button>\r\n          </li>\r\n          {demoList.map((item, index) => {\r\n            return (\r\n              <li key={`${item.start}-${index}`} className=\"clear\">\r\n                <span>{item.start}</span>\r\n                <span>{item.end}</span>\r\n                <Button\r\n                  className=\"fr\"\r\n                  onClick={() => {\r\n                    form.setFieldsValue({ startVersion: item.start, endVersion: item.end });\r\n                    validator();\r\n                  }}>\r\n                  验证\r\n                </Button>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default VsVersion;\r\n"],"sourceRoot":""}